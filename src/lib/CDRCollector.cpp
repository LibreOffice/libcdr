/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* libcdr
 * Version: MPL 1.1 / GPLv2+ / LGPLv2+
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License or as specified alternatively below. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * Major Contributor(s):
 * Copyright (C) 2012 Fridrich Strba <fridrich.strba@bluewin.ch>
 *
 *
 * All Rights Reserved.
 *
 * For minor contributions see the git repository.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPLv2+"), or
 * the GNU Lesser General Public License Version 2 or later (the "LGPLv2+"),
 * in which case the provisions of the GPLv2+ or the LGPLv2+ are applicable
 * instead of those above.
 */

#include <math.h>
#include <string.h>
#include "CDRCollector.h"

libcdr::CDRParserState::CDRParserState()
  : m_fillStyles(), m_lineStyles(), m_bmps(), m_patterns(), m_vects(), m_pages(),
    m_colorTransformCMYK2RGB(0), m_colorTransformLab2RGB(0), m_colorTransformRGB2RGB(0)
{
  cmsHPROFILE tmpRGBProfile = cmsCreate_sRGBProfile();
  m_colorTransformRGB2RGB = cmsCreateTransform(tmpRGBProfile, TYPE_RGB_8, tmpRGBProfile, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
  cmsHPROFILE tmpCMYKProfile = cmsOpenProfileFromMem(SWOP_icc, sizeof(SWOP_icc)/sizeof(SWOP_icc[0]));
  m_colorTransformCMYK2RGB = cmsCreateTransform(tmpCMYKProfile, TYPE_CMYK_DBL, tmpRGBProfile, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
  cmsHPROFILE tmpLabProfile = cmsCreateLab4Profile(0);
  m_colorTransformLab2RGB = cmsCreateTransform(tmpLabProfile, TYPE_Lab_DBL, tmpRGBProfile, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
  cmsCloseProfile(tmpLabProfile);
  cmsCloseProfile(tmpCMYKProfile);
  cmsCloseProfile(tmpRGBProfile);
}

libcdr::CDRParserState::~CDRParserState()
{
  if (m_colorTransformCMYK2RGB)
    cmsDeleteTransform(m_colorTransformCMYK2RGB);
  if (m_colorTransformLab2RGB)
    cmsDeleteTransform(m_colorTransformLab2RGB);
  if (m_colorTransformRGB2RGB)
    cmsDeleteTransform(m_colorTransformRGB2RGB);
}

void libcdr::CDRParserState::setColorTransform(const std::vector<unsigned char> &profile)
{
  if (profile.empty())
    return;
  cmsHPROFILE tmpProfile = cmsOpenProfileFromMem(&profile[0], profile.size());
  cmsHPROFILE tmpRGBProfile = cmsCreate_sRGBProfile();
  cmsColorSpaceSignature signature = cmsGetColorSpace(tmpProfile);
  switch (signature)
  {
  case cmsSigCmykData:
  {
    if (m_colorTransformCMYK2RGB)
      cmsDeleteTransform(m_colorTransformCMYK2RGB);
    m_colorTransformCMYK2RGB = cmsCreateTransform(tmpProfile, TYPE_CMYK_DBL, tmpRGBProfile, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
  }
  break;
  case cmsSigRgbData:
  {
    if (m_colorTransformRGB2RGB)
      cmsDeleteTransform(m_colorTransformRGB2RGB);
    m_colorTransformRGB2RGB = cmsCreateTransform(tmpProfile, TYPE_RGB_8, tmpRGBProfile, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
  }
  break;
  default:
    break;
  }
  cmsCloseProfile(tmpProfile);
  cmsCloseProfile(tmpRGBProfile);
}

void libcdr::CDRParserState::setColorTransform(WPXInputStream *input)
{
  if (!input)
    return;
  unsigned long numBytesRead = 0;
  const unsigned char *tmpProfile = input->read((unsigned long)-1, numBytesRead);
  if (!numBytesRead)
    return;
  std::vector<unsigned char> profile(numBytesRead);
  memcpy(&profile[0], tmpProfile, numBytesRead);
  setColorTransform(profile);
}

unsigned libcdr::CDRParserState::getBMPColor(const CDRColor &color)
{
  switch (color.m_colorModel)
  {
  case 0:
    return _getRGBColor(libcdr::CDRColor(0, color.m_colorValue));
  case 1:
    return _getRGBColor(libcdr::CDRColor(5, color.m_colorValue));
  case 2:
    return _getRGBColor(libcdr::CDRColor(4, color.m_colorValue));
  case 3:
    return _getRGBColor(libcdr::CDRColor(3, color.m_colorValue));
  case 4:
    return _getRGBColor(libcdr::CDRColor(6, color.m_colorValue));
  case 5:
    return _getRGBColor(libcdr::CDRColor(9, color.m_colorValue));
  case 6:
    return _getRGBColor(libcdr::CDRColor(8, color.m_colorValue));
  case 7:
    return _getRGBColor(libcdr::CDRColor(7, color.m_colorValue));
  case 8:
    return color.m_colorValue;
  case 9:
    return color.m_colorValue;
  case 10:
    return _getRGBColor(libcdr::CDRColor(5, color.m_colorValue));
  case 11:
    return _getRGBColor(libcdr::CDRColor(18, color.m_colorValue));
  default:
    return color.m_colorValue;
  }
}

unsigned libcdr::CDRParserState::_getRGBColor(const CDRColor &color)
{
  unsigned char red = 0;
  unsigned char green = 0;
  unsigned char blue = 0;
  unsigned char col0 = color.m_colorValue & 0xff;
  unsigned char col1 = (color.m_colorValue & 0xff00) >> 8;
  unsigned char col2 = (color.m_colorValue & 0xff0000) >> 16;
  unsigned char col3 = (color.m_colorValue & 0xff000000) >> 24;
  switch (color.m_colorModel)
  {
  case 0x00: // Pantone palette in CDR1
  {
    typedef struct
    {
      unsigned char r;
      unsigned char g;
      unsigned char b;
    }  RGBColor;

    typedef struct
    {
      unsigned short ix;
      RGBColor color;
    } ColorMap;

    ColorMap cMap [] =
    {
      // mapping between PANTONE index as stored by CDR1 and RGB values
      { 0x0001, { 0xff, 0xee, 0x00 } }, { 0x0002, { 0xde, 0x4f, 0x16 } },
      { 0x0003, { 0xa1, 0x00, 0x6a } }, { 0x0004, { 0xc5, 0x00, 0x8e } },
      { 0x0005, { 0x7d, 0x00, 0x89 } }, { 0x0006, { 0x0c, 0x00, 0x87 } },
      { 0x0007, { 0x00, 0x75, 0xad } }, { 0x0008, { 0x00, 0xa3, 0x6e } },
      { 0x0009, { 0x08, 0x0d, 0x02 } }, { 0x000a, { 0x30, 0x00, 0x7b } },
      { 0x0014, { 0xe5, 0xde, 0xc5 } }, { 0x0015, { 0xdc, 0xd9, 0xc7 } },
      { 0x0016, { 0xba, 0xad, 0xa4 } }, { 0x0017, { 0xa6, 0x96, 0x8d } },
      { 0x0018, { 0x82, 0x78, 0x72 } }, { 0x0019, { 0xaf, 0x9b, 0x8f } },
      { 0x001a, { 0xa9, 0x98, 0x8d } }, { 0x001b, { 0x85, 0x7a, 0x74 } },
      { 0x001c, { 0x78, 0x6e, 0x6b } }, { 0x001d, { 0x60, 0x58, 0x57 } },
      { 0x001e, { 0x44, 0x3c, 0x3e } }, { 0x001f, { 0xcf, 0xc9, 0xb5 } },
      { 0x0020, { 0xca, 0xc6, 0xba } }, { 0x0021, { 0xbe, 0xb5, 0xb2 } },
      { 0x0022, { 0xb0, 0xa6, 0xa6 } }, { 0x0023, { 0x91, 0x8e, 0x92 } },
      { 0x0024, { 0xaa, 0x9b, 0x98 } }, { 0x0025, { 0x91, 0x8d, 0x90 } },
      { 0x0026, { 0x75, 0x74, 0x7e } }, { 0x0027, { 0x5b, 0x5a, 0x68 } },
      { 0x0028, { 0x4d, 0x4d, 0x5c } }, { 0x0029, { 0x32, 0x35, 0x43 } },
      { 0x0063, { 0xff, 0xff, 0xff } }, { 0x0064, { 0xff, 0xf6, 0x81 } },
      { 0x0065, { 0xff, 0xfb, 0x6b } }, { 0x0066, { 0xff, 0xf4, 0x00 } },
      { 0x0067, { 0xc5, 0xb0, 0x0a } }, { 0x0068, { 0xa4, 0x93, 0x00 } },
      { 0x0069, { 0x6a, 0x60, 0x00 } }, { 0x006a, { 0xff, 0xf3, 0x7a } },
      { 0x006b, { 0xff, 0xf4, 0x6b } }, { 0x006c, { 0xff, 0xef, 0x5e } },
      { 0x006d, { 0xff, 0xed, 0x2f } }, { 0x006e, { 0xd9, 0xbd, 0x11 } },
      { 0x006f, { 0xa2, 0x8b, 0x00 } }, { 0x0070, { 0x8e, 0x7e, 0x00 } },
      { 0x0071, { 0xff, 0xee, 0x7a } }, { 0x0072, { 0xff, 0xef, 0x6a } },
      { 0x0073, { 0xff, 0xea, 0x57 } }, { 0x0074, { 0xff, 0xd9, 0x00 } },
      { 0x0075, { 0xc2, 0xa1, 0x00 } }, { 0x0076, { 0xa1, 0x85, 0x0d } },
      { 0x0077, { 0x73, 0x69, 0x0f } }, { 0x0078, { 0xff, 0xed, 0x7a } },
      { 0x0079, { 0xff, 0xee, 0x76 } }, { 0x007a, { 0xff, 0xe2, 0x1c } },
      { 0x007b, { 0xff, 0xd2, 0x00 } }, { 0x007c, { 0xc3, 0x98, 0x00 } },
      { 0x007d, { 0x9a, 0x7f, 0x00 } }, { 0x007e, { 0x84, 0x72, 0x00 } },
      { 0x007f, { 0xff, 0xe9, 0x7a } }, { 0x0080, { 0xff, 0xea, 0x78 } },
      { 0x0081, { 0xff, 0xe0, 0x1a } }, { 0x0082, { 0xff, 0xc7, 0x00 } },
      { 0x0083, { 0xc8, 0x99, 0x00 } }, { 0x0084, { 0x84, 0x6d, 0x00 } },
      { 0x0085, { 0x52, 0x4d, 0x05 } }, { 0x0086, { 0xff, 0xe0, 0x72 } },
      { 0x0087, { 0xff, 0xd6, 0x5f } }, { 0x0088, { 0xff, 0xc5, 0x1a } },
      { 0x0089, { 0xff, 0xac, 0x00 } }, { 0x008a, { 0xce, 0x8b, 0x00 } },
      { 0x008b, { 0x93, 0x6c, 0x00 } }, { 0x008c, { 0x5a, 0x4e, 0x09 } },
      { 0x008d, { 0xff, 0xd5, 0x61 } }, { 0x008e, { 0xff, 0xce, 0x4c } },
      { 0x008f, { 0xf2, 0xb5, 0x2b } }, { 0x0090, { 0xcb, 0x83, 0x00 } },
      { 0x0091, { 0xc5, 0x7e, 0x00 } }, { 0x0092, { 0x90, 0x6f, 0x00 } },
      { 0x0093, { 0x5b, 0x51, 0x01 } }, { 0x0094, { 0xff, 0xd7, 0x88 } },
      { 0x0095, { 0xff, 0xca, 0x74 } }, { 0x0096, { 0xff, 0xa7, 0x19 } },
      { 0x0097, { 0xff, 0x98, 0x00 } }, { 0x0098, { 0xcb, 0x7d, 0x00 } },
      { 0x0099, { 0x95, 0x65, 0x00 } }, { 0x009a, { 0x7f, 0x58, 0x00 } },
      { 0x009b, { 0xff, 0xe4, 0xa3 } }, { 0x009c, { 0xff, 0xd4, 0x83 } },
      { 0x009d, { 0xf5, 0x9a, 0x4c } }, { 0x009e, { 0xed, 0x7f, 0x2e } },
      { 0x009f, { 0xb2, 0x58, 0x2a } }, { 0x00a0, { 0x7a, 0x47, 0x02 } },
      { 0x00a1, { 0x4d, 0x35, 0x06 } }, { 0x00a2, { 0xff, 0xcb, 0x8b } },
      { 0x00a3, { 0xff, 0xb0, 0x73 } }, { 0x00a4, { 0xff, 0x93, 0x51 } },
      { 0x00a5, { 0xe6, 0x75, 0x00 } }, { 0x00a6, { 0xc2, 0x62, 0x00 } },
      { 0x00a7, { 0x9b, 0x54, 0x05 } }, { 0x00a8, { 0x43, 0x29, 0x0d } },
      { 0x00a9, { 0xff, 0xc1, 0x98 } }, { 0x00aa, { 0xff, 0x9e, 0x7c } },
      { 0x00ab, { 0xff, 0x85, 0x5d } }, { 0x00ac, { 0xff, 0x6d, 0x0d } },
      { 0x00ad, { 0xb8, 0x58, 0x02 } }, { 0x00ae, { 0x72, 0x3d, 0x07 } },
      { 0x00af, { 0x48, 0x29, 0x04 } }, { 0x00b0, { 0xff, 0xbd, 0xab } },
      { 0x00b1, { 0xff, 0x8e, 0x83 } }, { 0x00b2, { 0xff, 0x70, 0x61 } },
      { 0x00b3, { 0xc6, 0x42, 0x30 } }, { 0x00b4, { 0x8e, 0x38, 0x25 } },
      { 0x00b5, { 0x58, 0x2a, 0x23 } }, { 0x00b6, { 0xff, 0xc5, 0xba } },
      { 0x00b7, { 0xff, 0x8e, 0x9e } }, { 0x00b8, { 0xec, 0x76, 0x8e } },
      { 0x00b9, { 0xcc, 0x30, 0x4f } }, { 0x00ba, { 0xa3, 0x22, 0x3a } },
      { 0x00bb, { 0x74, 0x10, 0x19 } }, { 0x00bc, { 0x49, 0x10, 0x10 } },
      { 0x00bd, { 0xff, 0xb2, 0xb1 } }, { 0x00be, { 0xff, 0x98, 0xa9 } },
      { 0x00bf, { 0xdf, 0x59, 0x78 } }, { 0x00c0, { 0xd6, 0x26, 0x54 } },
      { 0x00c1, { 0x9a, 0x24, 0x47 } }, { 0x00c2, { 0x61, 0x13, 0x33 } },
      { 0x00c3, { 0x44, 0x18, 0x2e } }, { 0x00c4, { 0xff, 0xc3, 0xbd } },
      { 0x00c5, { 0xeb, 0xaa, 0xb1 } }, { 0x00c6, { 0xca, 0x35, 0x6a } },
      { 0x00c7, { 0xaa, 0x17, 0x43 } }, { 0x00c8, { 0x8d, 0x00, 0x34 } },
      { 0x00c9, { 0x71, 0x18, 0x39 } }, { 0x00ca, { 0x59, 0x1d, 0x1f } },
      { 0x00cb, { 0xff, 0xc0, 0xc3 } }, { 0x00cc, { 0xe9, 0x7d, 0xa2 } },
      { 0x00cd, { 0xd5, 0x56, 0x86 } }, { 0x00ce, { 0xaf, 0x07, 0x55 } },
      { 0x00cf, { 0x7c, 0x15, 0x49 } }, { 0x00d0, { 0x53, 0x0b, 0x34 } },
      { 0x00d1, { 0x43, 0x10, 0x30 } }, { 0x00d2, { 0xff, 0xa8, 0xb9 } },
      { 0x00d3, { 0xe7, 0x6d, 0x9c } }, { 0x00d4, { 0xdb, 0x33, 0x81 } },
      { 0x00d5, { 0xb8, 0x10, 0x63 } }, { 0x00d6, { 0xa1, 0x18, 0x5b } },
      { 0x00d7, { 0x67, 0x15, 0x44 } }, { 0x00d8, { 0x44, 0x09, 0x30 } },
      { 0x00d9, { 0xff, 0xce, 0xdf } }, { 0x00da, { 0xda, 0x74, 0xb1 } },
      { 0x00db, { 0xbc, 0x1a, 0x88 } }, { 0x00dc, { 0x7c, 0x00, 0x56 } },
      { 0x00dd, { 0x65, 0x00, 0x49 } }, { 0x00de, { 0x40, 0x00, 0x31 } },
      { 0x00df, { 0xff, 0x7a, 0xc5 } }, { 0x00e0, { 0xe8, 0x5d, 0xac } },
      { 0x00e1, { 0xd3, 0x31, 0x98 } }, { 0x00e2, { 0xb8, 0x00, 0x81 } },
      { 0x00e3, { 0x7d, 0x00, 0x5e } }, { 0x00e4, { 0x57, 0x00, 0x46 } },
      { 0x00e5, { 0x3c, 0x10, 0x36 } }, { 0x00e6, { 0xff, 0xba, 0xd4 } },
      { 0x00e7, { 0xe4, 0x6c, 0xb2 } }, { 0x00e8, { 0xd0, 0x34, 0x9e } },
      { 0x00e9, { 0xa6, 0x00, 0x7b } }, { 0x00ea, { 0x6c, 0x00, 0x59 } },
      { 0x00eb, { 0x4a, 0x00, 0x40 } }, { 0x00ec, { 0xff, 0xa1, 0xd8 } },
      { 0x00ed, { 0xef, 0x60, 0xc6 } }, { 0x00ee, { 0xc6, 0x3c, 0xa5 } },
      { 0x00ef, { 0xab, 0x00, 0x89 } }, { 0x00f0, { 0x80, 0x00, 0x71 } },
      { 0x00f1, { 0x68, 0x00, 0x5d } }, { 0x00f2, { 0x3f, 0x00, 0x3c } },
      { 0x00f3, { 0xff, 0xd0, 0xed } }, { 0x00f4, { 0xde, 0x95, 0xc5 } },
      { 0x00f5, { 0xd0, 0x67, 0xc2 } }, { 0x00f6, { 0x8d, 0x00, 0x8a } },
      { 0x00f7, { 0x7c, 0x00, 0x7c } }, { 0x00f8, { 0x66, 0x00, 0x6e } },
      { 0x00f9, { 0x44, 0x00, 0x4d } }, { 0x00fa, { 0xf9, 0xd5, 0xee } },
      { 0x00fb, { 0xe4, 0x93, 0xff } }, { 0x00fc, { 0xab, 0x35, 0xbe } },
      { 0x00fd, { 0x63, 0x00, 0x74 } }, { 0x00fe, { 0x4e, 0x00, 0x58 } },
      { 0x00ff, { 0x37, 0x00, 0x47 } }, { 0x0100, { 0xe6, 0xb9, 0xd3 } },
      { 0x0101, { 0xd2, 0x9b, 0xc6 } }, { 0x0102, { 0x91, 0x45, 0xa5 } },
      { 0x0103, { 0x64, 0x0a, 0x7f } }, { 0x0104, { 0x45, 0x0f, 0x56 } },
      { 0x0105, { 0x3b, 0x17, 0x4e } }, { 0x0106, { 0x35, 0x1d, 0x4a } },
      { 0x0107, { 0xda, 0xc4, 0xde } }, { 0x0108, { 0xb1, 0x8a, 0xd0 } },
      { 0x0109, { 0x6f, 0x2b, 0xb1 } }, { 0x010a, { 0x48, 0x12, 0x8a } },
      { 0x010b, { 0x36, 0x05, 0x70 } }, { 0x010c, { 0x2f, 0x0a, 0x5e } },
      { 0x010d, { 0x21, 0x05, 0x4d } }, { 0x010e, { 0xc2, 0xa6, 0xcc } },
      { 0x010f, { 0xab, 0x89, 0xc4 } }, { 0x0110, { 0x8c, 0x6f, 0xba } },
      { 0x0111, { 0x3e, 0x1d, 0x88 } }, { 0x0112, { 0x25, 0x07, 0x65 } },
      { 0x0113, { 0x22, 0x0c, 0x57 } }, { 0x0114, { 0x1c, 0x0d, 0x45 } },
      { 0x0115, { 0xc2, 0xc9, 0xdc } }, { 0x0116, { 0xa8, 0xab, 0xdd } },
      { 0x0117, { 0x7c, 0x89, 0xc4 } }, { 0x0118, { 0x06, 0x10, 0x6a } },
      { 0x0119, { 0x00, 0x0e, 0x4f } }, { 0x011a, { 0x0a, 0x0c, 0x44 } },
      { 0x011b, { 0xc9, 0xd5, 0xf0 } }, { 0x011c, { 0xa7, 0xb8, 0xdf } },
      { 0x011d, { 0x5f, 0x74, 0xe2 } }, { 0x011e, { 0x25, 0x3f, 0xb6 } },
      { 0x011f, { 0x00, 0x17, 0x69 } }, { 0x0120, { 0x00, 0x00, 0x67 } },
      { 0x0121, { 0x00, 0x0e, 0x44 } }, { 0x0122, { 0xc4, 0xd5, 0xe5 } },
      { 0x0123, { 0x94, 0xb0, 0xdc } }, { 0x0124, { 0x75, 0x92, 0xc7 } },
      { 0x0125, { 0x00, 0x00, 0xb4 } }, { 0x0126, { 0x00, 0x2a, 0x7f } },
      { 0x0127, { 0x00, 0x28, 0x6c } }, { 0x0128, { 0x00, 0x1c, 0x48 } },
      { 0x0129, { 0x8b, 0xb0, 0xc9 } }, { 0x012a, { 0x6c, 0x97, 0xb8 } },
      { 0x012b, { 0x40, 0x7f, 0xb3 } }, { 0x012c, { 0x0f, 0x59, 0xa0 } },
      { 0x012d, { 0x00, 0x40, 0x85 } }, { 0x012e, { 0x00, 0x2f, 0x5d } },
      { 0x012f, { 0x00, 0x29, 0x4d } }, { 0x0130, { 0xcc, 0xea, 0xe4 } },
      { 0x0131, { 0x7f, 0xcd, 0xe1 } }, { 0x0132, { 0x56, 0xa9, 0xc7 } },
      { 0x0133, { 0x00, 0x67, 0x95 } }, { 0x0134, { 0x00, 0x42, 0x61 } },
      { 0x0135, { 0x00, 0x2f, 0x4e } }, { 0x0136, { 0x9e, 0xd7, 0xd2 } },
      { 0x0137, { 0x72, 0xb7, 0xc1 } }, { 0x0138, { 0x2e, 0x8a, 0xa1 } },
      { 0x0139, { 0x00, 0x72, 0x91 } }, { 0x013a, { 0x00, 0x62, 0x81 } },
      { 0x013b, { 0x00, 0x44, 0x5f } }, { 0x013c, { 0x00, 0x29, 0x3c } },
      { 0x013d, { 0xdb, 0xff, 0xe4 } }, { 0x013e, { 0xc7, 0xf5, 0xdf } },
      { 0x013f, { 0x72, 0xd6, 0xc1 } }, { 0x0140, { 0x00, 0x96, 0x96 } },
      { 0x0141, { 0x00, 0x78, 0x7d } }, { 0x0142, { 0x00, 0x6b, 0x71 } },
      { 0x0143, { 0x00, 0x4b, 0x55 } }, { 0x0144, { 0xb7, 0xdf, 0xc2 } },
      { 0x0145, { 0x89, 0xd0, 0xb0 } }, { 0x0146, { 0x6b, 0xb9, 0xa1 } },
      { 0x0147, { 0x17, 0x84, 0x79 } }, { 0x0148, { 0x10, 0x5f, 0x5e } },
      { 0x0149, { 0x00, 0x4f, 0x50 } }, { 0x014a, { 0x16, 0x37, 0x3f } },
      { 0x014b, { 0xcc, 0xf5, 0xc2 } }, { 0x014c, { 0xc0, 0xf0, 0xbe } },
      { 0x014d, { 0x74, 0xe2, 0xa3 } }, { 0x014e, { 0x17, 0x85, 0x5c } },
      { 0x014f, { 0x15, 0x6e, 0x54 } }, { 0x0150, { 0x12, 0x58, 0x4b } },
      { 0x0151, { 0xa1, 0xe8, 0xb1 } }, { 0x0152, { 0x82, 0xce, 0x9d } },
      { 0x0153, { 0x59, 0xaa, 0x80 } }, { 0x0154, { 0x2a, 0x91, 0x67 } },
      { 0x0155, { 0x1b, 0x6d, 0x52 } }, { 0x0156, { 0x24, 0x5c, 0x4a } },
      { 0x0157, { 0x11, 0x41, 0x3d } }, { 0x0158, { 0xc8, 0xee, 0xa5 } },
      { 0x0159, { 0xbc, 0xf4, 0xa2 } }, { 0x015a, { 0x8d, 0xee, 0x88 } },
      { 0x015b, { 0x3b, 0xb2, 0x53 } }, { 0x015c, { 0x30, 0x95, 0x40 } },
      { 0x015d, { 0x2a, 0x6f, 0x36 } }, { 0x015e, { 0x2d, 0x4a, 0x1f } },
      { 0x015f, { 0xc8, 0xf6, 0xa6 } }, { 0x0160, { 0xbc, 0xff, 0xa0 } },
      { 0x0161, { 0x92, 0xf5, 0x8f } }, { 0x0162, { 0x2b, 0xcb, 0x4c } },
      { 0x0163, { 0x31, 0x8b, 0x40 } }, { 0x0164, { 0x2a, 0x67, 0x39 } },
      { 0x0165, { 0x27, 0x47, 0x30 } }, { 0x0166, { 0xd6, 0xf0, 0x94 } },
      { 0x0167, { 0xb7, 0xe3, 0x6f } }, { 0x0168, { 0x8f, 0xd4, 0x4e } },
      { 0x0169, { 0x5e, 0xa2, 0x23 } }, { 0x016a, { 0x4a, 0x7d, 0x22 } },
      { 0x016b, { 0x46, 0x6c, 0x18 } }, { 0x016c, { 0x3f, 0x5c, 0x12 } },
      { 0x016d, { 0xe5, 0xf4, 0x91 } }, { 0x016e, { 0xda, 0xf1, 0x73 } },
      { 0x016f, { 0xc0, 0xe7, 0x52 } }, { 0x0170, { 0x89, 0xca, 0x03 } },
      { 0x0171, { 0x76, 0xa6, 0x00 } }, { 0x0172, { 0x62, 0x80, 0x00 } },
      { 0x0173, { 0x45, 0x52, 0x0a } }, { 0x0174, { 0xf6, 0xff, 0x74 } },
      { 0x0175, { 0xe8, 0xff, 0x6c } }, { 0x0176, { 0xcc, 0xe7, 0x3d } },
      { 0x0177, { 0xb0, 0xde, 0x00 } }, { 0x0178, { 0x98, 0xbd, 0x00 } },
      { 0x0179, { 0x7f, 0x93, 0x00 } }, { 0x017a, { 0x51, 0x57, 0x00 } },
      { 0x017b, { 0xf7, 0xf6, 0x66 } }, { 0x017c, { 0xe6, 0xf1, 0x57 } },
      { 0x017d, { 0xd1, 0xe0, 0x22 } }, { 0x017e, { 0xc4, 0xd6, 0x00 } },
      { 0x017f, { 0xac, 0xae, 0x00 } }, { 0x0180, { 0x98, 0x96, 0x00 } },
      { 0x0181, { 0x6e, 0x6b, 0x00 } }, { 0x0182, { 0xf9, 0xfa, 0x7e } },
      { 0x0183, { 0xf4, 0xfa, 0x62 } }, { 0x0184, { 0xed, 0xfa, 0x37 } },
      { 0x0185, { 0xec, 0xff, 0x0d } }, { 0x0186, { 0xbb, 0xbf, 0x00 } },
      { 0x0187, { 0x9f, 0x99, 0x00 } }, { 0x0188, { 0x74, 0x73, 0x00 } },
      { 0x0189, { 0xfd, 0xf3, 0x78 } }, { 0x018a, { 0xf6, 0xf9, 0x4f } },
      { 0x018b, { 0xf1, 0xf2, 0x20 } }, { 0x018c, { 0xe9, 0xf2, 0x00 } },
      { 0x018d, { 0xbf, 0xba, 0x00 } }, { 0x018e, { 0xa1, 0x9b, 0x00 } },
      { 0x018f, { 0x8e, 0x86, 0x03 } }, { 0x0190, { 0xd3, 0xc9, 0xaf } },
      { 0x0191, { 0xb2, 0xa3, 0x90 } }, { 0x0192, { 0x96, 0x8d, 0x80 } },
      { 0x0193, { 0x82, 0x7a, 0x6d } }, { 0x0194, { 0x5e, 0x58, 0x54 } },
      { 0x0195, { 0x33, 0x31, 0x2e } }, { 0x0196, { 0xd6, 0xca, 0xb5 } },
      { 0x0197, { 0xb5, 0xa6, 0x9a } }, { 0x0198, { 0xaa, 0x9c, 0x97 } },
      { 0x0199, { 0x7c, 0x73, 0x71 } }, { 0x019a, { 0x54, 0x4a, 0x48 } },
      { 0x019b, { 0x43, 0x3e, 0x44 } }, { 0x019c, { 0x11, 0x0f, 0x0a } },
      { 0x019d, { 0xc8, 0xc0, 0xa6 } }, { 0x019e, { 0xac, 0xa3, 0x96 } },
      { 0x019f, { 0x89, 0x86, 0x7d } }, { 0x01a0, { 0x65, 0x67, 0x64 } },
      { 0x01a1, { 0x4b, 0x4d, 0x4b } }, { 0x01a2, { 0x39, 0x3b, 0x3b } },
      { 0x01a3, { 0x13, 0x13, 0x17 } }, { 0x01a4, { 0xc8, 0xc3, 0xbb } },
      { 0x01a5, { 0xbc, 0xb7, 0xb8 } }, { 0x01a6, { 0x8d, 0x8b, 0x92 } },
      { 0x01a7, { 0x7f, 0x7d, 0x82 } }, { 0x01a8, { 0x5d, 0x5b, 0x60 } },
      { 0x01a9, { 0x3a, 0x3a, 0x48 } }, { 0x01aa, { 0x07, 0x0b, 0x1c } },
      { 0x01ab, { 0xcc, 0xc7, 0xbb } }, { 0x01ac, { 0xb2, 0xac, 0xb0 } },
      { 0x01ad, { 0x8f, 0x8f, 0x99 } }, { 0x01ae, { 0x78, 0x78, 0x82 } },
      { 0x01af, { 0x51, 0x55, 0x67 } }, { 0x01b0, { 0x28, 0x2e, 0x48 } },
      { 0x01b1, { 0x0f, 0x10, 0x20 } }, { 0x01b2, { 0xcc, 0xb0, 0xa6 } },
      { 0x01b3, { 0xc3, 0xa4, 0x9d } }, { 0x01b4, { 0x9a, 0x7b, 0x7f } },
      { 0x01b5, { 0x78, 0x60, 0x6a } }, { 0x01b6, { 0x3f, 0x2d, 0x3d } },
      { 0x01b7, { 0x26, 0x1a, 0x25 } }, { 0x01b8, { 0x21, 0x1b, 0x22 } },
      { 0x01b9, { 0xd4, 0xd2, 0xc6 } }, { 0x01ba, { 0xbd, 0xbb, 0xb8 } },
      { 0x01bb, { 0x8b, 0x8e, 0x91 } }, { 0x01bc, { 0x69, 0x6a, 0x6d } },
      { 0x01bd, { 0x47, 0x48, 0x50 } }, { 0x01be, { 0x2e, 0x2e, 0x3b } },
      { 0x01bf, { 0x22, 0x24, 0x22 } }, { 0x01c0, { 0x3a, 0x31, 0x16 } },
      { 0x01c1, { 0x4f, 0x46, 0x3a } }, { 0x01c2, { 0x59, 0x4e, 0x2d } },
      { 0x01c3, { 0xa0, 0x8f, 0x72 } }, { 0x01c4, { 0xad, 0x9d, 0x86 } },
      { 0x01c5, { 0xc8, 0xba, 0x95 } }, { 0x01c6, { 0xdd, 0xd8, 0xad } },
      { 0x01c7, { 0x54, 0x4b, 0x25 } }, { 0x01c8, { 0x7f, 0x70, 0x19 } },
      { 0x01c9, { 0xa8, 0x8f, 0x2f } }, { 0x01ca, { 0xe2, 0xd3, 0x60 } },
      { 0x01cb, { 0xea, 0xe1, 0x71 } }, { 0x01cc, { 0xf7, 0xef, 0x83 } },
      { 0x01cd, { 0xf7, 0xee, 0x98 } }, { 0x01ce, { 0x59, 0x45, 0x35 } },
      { 0x01cf, { 0x6d, 0x4f, 0x2b } }, { 0x01d0, { 0x83, 0x5a, 0x35 } },
      { 0x01d1, { 0xc2, 0xa0, 0x75 } }, { 0x01d2, { 0xd6, 0xba, 0x8a } },
      { 0x01d3, { 0xdb, 0xc5, 0x8e } }, { 0x01d4, { 0xea, 0xd9, 0xa3 } },
      { 0x01d5, { 0x4d, 0x35, 0x22 } }, { 0x01d6, { 0x9f, 0x61, 0x2e } },
      { 0x01d7, { 0xc2, 0x6d, 0x21 } }, { 0x01d8, { 0xe9, 0xa8, 0x72 } },
      { 0x01d9, { 0xe6, 0xb4, 0x80 } }, { 0x01da, { 0xf0, 0xcf, 0x99 } },
      { 0x01db, { 0xf3, 0xd5, 0x9e } }, { 0x01dc, { 0x3b, 0x29, 0x2d } },
      { 0x01dd, { 0x5a, 0x3d, 0x3b } }, { 0x01de, { 0x68, 0x3e, 0x3b } },
      { 0x01df, { 0xa5, 0x7f, 0x6f } }, { 0x01e0, { 0xb1, 0x92, 0x86 } },
      { 0x01e1, { 0xcc, 0xab, 0x97 } }, { 0x01e2, { 0xd6, 0xc4, 0xaf } },
      { 0x01e3, { 0x4f, 0x30, 0x20 } }, { 0x01e4, { 0x91, 0x41, 0x20 } },
      { 0x01e5, { 0xc8, 0x3f, 0x31 } }, { 0x01e6, { 0xdb, 0x92, 0x79 } },
      { 0x01e7, { 0xef, 0xab, 0x8d } }, { 0x01e8, { 0xeb, 0xb2, 0x98 } },
      { 0x01e9, { 0xf5, 0xcf, 0xb0 } }, { 0x01ea, { 0x4e, 0x2b, 0x33 } },
      { 0x01eb, { 0x60, 0x27, 0x32 } }, { 0x01ec, { 0x70, 0x22, 0x37 } },
      { 0x01ed, { 0xc5, 0x70, 0x7d } }, { 0x01ee, { 0xe8, 0x9b, 0x9e } },
      { 0x01ef, { 0xef, 0xb5, 0xb1 } }, { 0x01f0, { 0xf4, 0xca, 0xb6 } },
      { 0x01f1, { 0x3f, 0x29, 0x1b } }, { 0x01f2, { 0x59, 0x33, 0x31 } },
      { 0x01f3, { 0x72, 0x3c, 0x38 } }, { 0x01f4, { 0xc7, 0x80, 0x7e } },
      { 0x01f5, { 0xd5, 0x98, 0x90 } }, { 0x01f6, { 0xe4, 0xb1, 0xa5 } },
      { 0x01f7, { 0xf0, 0xcd, 0xb9 } }, { 0x01f8, { 0x42, 0x1f, 0x31 } },
      { 0x01f9, { 0x53, 0x21, 0x38 } }, { 0x01fa, { 0x60, 0x29, 0x44 } },
      { 0x01fb, { 0xbc, 0x6c, 0x83 } }, { 0x01fc, { 0xd2, 0x83, 0x90 } },
      { 0x01fd, { 0xe9, 0xa6, 0xa9 } }, { 0x01fe, { 0xec, 0xb8, 0xb8 } },
      { 0x01ff, { 0x48, 0x26, 0x4a } }, { 0x0200, { 0x68, 0x2f, 0x6f } },
      { 0x0201, { 0x80, 0x2e, 0x83 } }, { 0x0202, { 0xc2, 0x6a, 0xa9 } },
      { 0x0203, { 0xd3, 0x8b, 0xb4 } }, { 0x0204, { 0xeb, 0xa5, 0xc2 } },
      { 0x0205, { 0xf7, 0xc7, 0xcf } }, { 0x0206, { 0x3b, 0x1d, 0x3e } },
      { 0x0207, { 0x55, 0x29, 0x61 } }, { 0x0208, { 0x62, 0x29, 0x6f } },
      { 0x0209, { 0xa6, 0x72, 0x9a } }, { 0x020a, { 0xbc, 0x8d, 0xa6 } },
      { 0x020b, { 0xd5, 0xaa, 0xb9 } }, { 0x020c, { 0xe7, 0xc7, 0xce } },
      { 0x020d, { 0x3c, 0x20, 0x56 } }, { 0x020e, { 0x4e, 0x20, 0x77 } },
      { 0x020f, { 0x5b, 0x1c, 0x8b } }, { 0x0210, { 0x94, 0x62, 0xa8 } },
      { 0x0211, { 0xba, 0x86, 0xc1 } }, { 0x0212, { 0xd2, 0xa2, 0xcd } },
      { 0x0213, { 0xe2, 0xc5, 0xe1 } }, { 0x0214, { 0x21, 0x1e, 0x3c } },
      { 0x0215, { 0x2d, 0x23, 0x4e } }, { 0x0216, { 0x3e, 0x37, 0x6b } },
      { 0x0217, { 0x8b, 0x80, 0x99 } }, { 0x0218, { 0xad, 0x9e, 0xb5 } },
      { 0x0219, { 0xb9, 0xaf, 0xc2 } }, { 0x021a, { 0xcc, 0xc8, 0xd0 } },
      { 0x021b, { 0x18, 0x23, 0x4c } }, { 0x021c, { 0x0f, 0x2d, 0x67 } },
      { 0x021d, { 0x0f, 0x33, 0x7c } }, { 0x021e, { 0x65, 0x7b, 0xab } },
      { 0x021f, { 0x8c, 0x9b, 0xbc } }, { 0x0220, { 0xa9, 0xb1, 0xc6 } },
      { 0x0221, { 0xc3, 0xcd, 0xdc } }, { 0x0222, { 0x00, 0x1b, 0x39 } },
      { 0x0223, { 0x09, 0x31, 0x51 } }, { 0x0224, { 0x1f, 0x47, 0x69 } },
      { 0x0225, { 0x59, 0x7a, 0x96 } }, { 0x0226, { 0x81, 0x9c, 0xac } },
      { 0x0227, { 0x9f, 0xab, 0xb3 } }, { 0x0228, { 0xc3, 0xcf, 0xcd } },
      { 0x0229, { 0x19, 0x2b, 0x00 } }, { 0x022a, { 0x18, 0x3e, 0x00 } },
      { 0x022b, { 0x21, 0x4e, 0x27 } }, { 0x022c, { 0x69, 0x86, 0x6d } },
      { 0x022d, { 0x95, 0xa6, 0x90 } }, { 0x022e, { 0xa5, 0xb1, 0x9a } },
      { 0x022f, { 0xb7, 0xc5, 0xaa } }, { 0x0230, { 0x1d, 0x30, 0x27 } },
      { 0x0231, { 0x27, 0x50, 0x46 } }, { 0x0232, { 0x39, 0x6c, 0x5d } },
      { 0x0233, { 0x74, 0xa1, 0x85 } }, { 0x0234, { 0x92, 0xb4, 0x99 } },
      { 0x0235, { 0xc4, 0xdd, 0xbe } }, { 0x0236, { 0xe1, 0xf6, 0xd7 } },
      { 0x0237, { 0x1b, 0x38, 0x2d } }, { 0x0238, { 0x16, 0x4f, 0x3b } },
      { 0x0239, { 0x2b, 0x6c, 0x55 } }, { 0x023a, { 0x67, 0xa6, 0x84 } },
      { 0x023b, { 0x93, 0xc7, 0x9e } }, { 0x023c, { 0xb6, 0xd9, 0xb2 } },
      { 0x023d, { 0xd1, 0xe8, 0xc1 } }, { 0x023e, { 0x39, 0x41, 0x00 } },
      { 0x023f, { 0x4e, 0x62, 0x00 } }, { 0x0240, { 0x56, 0x77, 0x00 } },
      { 0x0241, { 0xa6, 0xbe, 0x64 } }, { 0x0242, { 0xc8, 0xd8, 0x85 } },
      { 0x0243, { 0xd5, 0xde, 0x87 } }, { 0x0244, { 0xdd, 0xe4, 0x9a } },
      { 0x0245, { 0x5a, 0x56, 0x00 } }, { 0x0246, { 0x90, 0x91, 0x00 } },
      { 0x0247, { 0xa5, 0xae, 0x00 } }, { 0x0248, { 0xd0, 0xda, 0x5b } },
      { 0x0249, { 0xdd, 0xe3, 0x65 } }, { 0x024a, { 0xe7, 0xec, 0x73 } },
      { 0x024b, { 0xe9, 0xef, 0x8d } }, { 0x024c, { 0xff, 0xd1, 0x70 } },
      { 0x024d, { 0xff, 0xcd, 0x64 } }, { 0x024e, { 0xff, 0xb6, 0x15 } },
      { 0x024f, { 0xff, 0x9c, 0x00 } }, { 0x0250, { 0xce, 0x85, 0x00 } },
      { 0x0251, { 0x7c, 0x5a, 0x00 } }, { 0x0252, { 0x46, 0x34, 0x00 } },
      { 0x0253, { 0xff, 0xcc, 0x8f } }, { 0x0254, { 0xff, 0xa9, 0x63 } },
      { 0x0255, { 0xf5, 0x85, 0x32 } }, { 0x0256, { 0xf7, 0x78, 0x00 } },
      { 0x0257, { 0xc2, 0x63, 0x00 } }, { 0x0258, { 0x86, 0x4e, 0x00 } },
      { 0x0259, { 0x57, 0x31, 0x00 } }, { 0x025a, { 0xff, 0xb6, 0x8c } },
      { 0x025b, { 0xff, 0xa5, 0x7b } }, { 0x025c, { 0xff, 0x83, 0x4f } },
      { 0x025d, { 0xe6, 0x60, 0x00 } }, { 0x025e, { 0xc2, 0x56, 0x00 } },
      { 0x025f, { 0x7d, 0x3b, 0x00 } }, { 0x0260, { 0x4d, 0x27, 0x00 } },
      { 0x0261, { 0xff, 0xa7, 0xa5 } }, { 0x0262, { 0xff, 0x88, 0x8f } },
      { 0x0263, { 0xff, 0x63, 0x75 } }, { 0x0264, { 0xde, 0x2c, 0x1a } },
      { 0x0265, { 0xc6, 0x2d, 0x37 } }, { 0x0266, { 0x78, 0x19, 0x15 } },
      { 0x0267, { 0x4f, 0x18, 0x18 } }, { 0x0268, { 0xca, 0x61, 0xff } },
      { 0x0269, { 0xbc, 0x39, 0xff } }, { 0x026a, { 0x80, 0x0e, 0xbe } },
      { 0x026b, { 0x59, 0x00, 0x89 } }, { 0x026c, { 0x4c, 0x00, 0x74 } },
      { 0x026d, { 0x38, 0x00, 0x58 } }, { 0x026e, { 0x2f, 0x00, 0x4e } },
      { 0x026f, { 0xbf, 0x6b, 0xff } }, { 0x0270, { 0xae, 0x3d, 0xff } },
      { 0x0271, { 0x8a, 0x20, 0xdb } }, { 0x0272, { 0x47, 0x00, 0x80 } },
      { 0x0273, { 0x3d, 0x00, 0x70 } }, { 0x0274, { 0x35, 0x00, 0x63 } },
      { 0x0275, { 0x28, 0x00, 0x52 } }, { 0x0276, { 0xcf, 0x99, 0xff } },
      { 0x0277, { 0xa8, 0x4e, 0xff } }, { 0x0278, { 0x6c, 0x0f, 0xc0 } },
      { 0x0279, { 0x51, 0x00, 0xa0 } }, { 0x027a, { 0x20, 0x00, 0x5f } },
      { 0x027b, { 0x1e, 0x12, 0x4c } }, { 0x027c, { 0x9c, 0x79, 0xcc } },
      { 0x027d, { 0x8e, 0x74, 0xcc } }, { 0x027e, { 0x6c, 0x22, 0xcf } },
      { 0x027f, { 0x33, 0x00, 0x8e } }, { 0x0280, { 0x26, 0x00, 0x6f } },
      { 0x0281, { 0x1d, 0x00, 0x57 } }, { 0x0282, { 0x17, 0x00, 0x45 } },
      { 0x0283, { 0xbc, 0xd5, 0xda } }, { 0x0284, { 0x7c, 0xac, 0xd1 } },
      { 0x0285, { 0x56, 0x9a, 0xc9 } }, { 0x0286, { 0x21, 0x76, 0xc1 } },
      { 0x0287, { 0x13, 0x52, 0x8a } }, { 0x0288, { 0x00, 0x39, 0x5d } },
      { 0x0289, { 0x00, 0x25, 0x40 } }, { 0x028a, { 0x9e, 0xd7, 0xca } },
      { 0x028b, { 0x72, 0xb4, 0xb6 } }, { 0x028c, { 0x00, 0x92, 0xa1 } },
      { 0x028d, { 0x0d, 0x76, 0x8b } }, { 0x028e, { 0x00, 0x68, 0x7c } },
      { 0x028f, { 0x00, 0x47, 0x5b } }, { 0x0290, { 0x00, 0x35, 0x48 } },
      { 0x0291, { 0xae, 0xe9, 0xc3 } }, { 0x0292, { 0x7e, 0xe3, 0xb7 } },
      { 0x0293, { 0x50, 0xc3, 0x9e } }, { 0x0294, { 0x00, 0x94, 0x7c } },
      { 0x0295, { 0x00, 0x78, 0x6c } }, { 0x0296, { 0x00, 0x51, 0x4f } },
      { 0x0297, { 0x00, 0x32, 0x38 } }, { 0x0298, { 0xac, 0xdf, 0xb7 } },
      { 0x0299, { 0x7c, 0xd0, 0xa6 } }, { 0x029a, { 0x5e, 0xb9, 0x96 } },
      { 0x029b, { 0x00, 0x91, 0x76 } }, { 0x029c, { 0x0a, 0x71, 0x60 } },
      { 0x029d, { 0x0c, 0x5b, 0x51 } }, { 0x029e, { 0x0d, 0x37, 0x32 } },
      { 0x029f, { 0x86, 0xd6, 0xb0 } }, { 0x02a0, { 0x70, 0xcd, 0xa6 } },
      { 0x02a1, { 0x29, 0xa8, 0x89 } }, { 0x02a2, { 0x00, 0x8a, 0x6e } },
      { 0x02a3, { 0x00, 0x6e, 0x5c } }, { 0x02a4, { 0x00, 0x57, 0x49 } },
      { 0x02a5, { 0x00, 0x2e, 0x26 } }, { 0x02a6, { 0xa4, 0xe9, 0xa7 } },
      { 0x02a7, { 0x7c, 0xe5, 0x95 } }, { 0x02a8, { 0x5c, 0xd4, 0x81 } },
      { 0x02a9, { 0x34, 0xa5, 0x62 } }, { 0x02aa, { 0x30, 0x80, 0x57 } },
      { 0x02ab, { 0x24, 0x5c, 0x44 } }, { 0x02ac, { 0x11, 0x38, 0x23 } },
      { 0x02ad, { 0xff, 0xff, 0x78 } }, { 0x02ae, { 0xfb, 0xfe, 0x4f } },
      { 0x02af, { 0xf8, 0xfa, 0x20 } }, { 0x02b0, { 0xe9, 0xec, 0x00 } },
      { 0x02b1, { 0xab, 0xa2, 0x00 } }, { 0x02b2, { 0x85, 0x81, 0x00 } },
      { 0x02b3, { 0x59, 0x56, 0x00 } }, { 0x02b4, { 0x4f, 0x42, 0x0c } },
      { 0x02b5, { 0x77, 0x69, 0x00 } }, { 0x02b6, { 0x8a, 0x7c, 0x3e } },
      { 0x02b7, { 0xbb, 0xab, 0x7e } }, { 0x02b8, { 0xbf, 0xb0, 0x84 } },
      { 0x02b9, { 0xca, 0xc4, 0x9b } }, { 0x02ba, { 0xd6, 0xd1, 0xa9 } },
      { 0x02bb, { 0x45, 0x2a, 0x00 } }, { 0x02bc, { 0x7e, 0x59, 0x43 } },
      { 0x02bd, { 0xa1, 0x7a, 0x62 } }, { 0x02be, { 0xbe, 0x96, 0x75 } },
      { 0x02bf, { 0xc9, 0xa9, 0x8c } }, { 0x02c0, { 0xc9, 0xac, 0x91 } },
      { 0x02c1, { 0xd3, 0xba, 0x9c } }, { 0x02c2, { 0x4d, 0x2b, 0x32 } },
      { 0x02c3, { 0x6a, 0x3e, 0x3e } }, { 0x02c4, { 0x92, 0x6e, 0x66 } },
      { 0x02c5, { 0xae, 0x84, 0x74 } }, { 0x02c6, { 0xbc, 0x95, 0x80 } },
      { 0x02c7, { 0xc8, 0xac, 0x99 } }, { 0x02c8, { 0xd1, 0xb7, 0x9e } },
      { 0x02c9, { 0x43, 0x2d, 0x3a } }, { 0x02ca, { 0x71, 0x43, 0x55 } },
      { 0x02cb, { 0x92, 0x60, 0x6d } }, { 0x02cc, { 0xc6, 0x94, 0x9a } },
      { 0x02cd, { 0xd5, 0xa4, 0xa7 } }, { 0x02ce, { 0xdb, 0xc2, 0xb9 } },
      { 0x02cf, { 0xdd, 0xcc, 0xc3 } }, { 0x02d0, { 0x3f, 0x18, 0x4a } },
      { 0x02d1, { 0x63, 0x2e, 0x6f } }, { 0x02d2, { 0x8c, 0x56, 0x91 } },
      { 0x02d3, { 0xba, 0x89, 0xad } }, { 0x02d4, { 0xc0, 0x9a, 0xb3 } },
      { 0x02d5, { 0xce, 0xb1, 0xc2 } }, { 0x02d6, { 0xd9, 0xc8, 0xcd } },
      { 0x02d7, { 0x2d, 0x1b, 0x3e } }, { 0x02d8, { 0x44, 0x29, 0x52 } },
      { 0x02d9, { 0x69, 0x48, 0x70 } }, { 0x02da, { 0x90, 0x72, 0x8b } },
      { 0x02db, { 0xac, 0x8d, 0x9f } }, { 0x02dc, { 0xc2, 0xaa, 0xb3 } },
      { 0x02dd, { 0xd7, 0xc7, 0xc6 } }, { 0x02de, { 0x1e, 0x00, 0x4b } },
      { 0x02df, { 0x3a, 0x20, 0x77 } }, { 0x02e0, { 0x42, 0x1c, 0x8b } },
      { 0x02e1, { 0x73, 0x5c, 0xac } }, { 0x02e2, { 0x9b, 0x84, 0xc1 } },
      { 0x02e3, { 0xb7, 0xa4, 0xcd } }, { 0x02e4, { 0xcc, 0xc3, 0xe1 } },
      { 0x02e5, { 0x06, 0x1c, 0x50 } }, { 0x02e6, { 0x1b, 0x33, 0x65 } },
      { 0x02e7, { 0x4d, 0x5f, 0x85 } }, { 0x02e8, { 0x75, 0x80, 0x9c } },
      { 0x02e9, { 0x9a, 0x9e, 0xb8 } }, { 0x02ea, { 0xb0, 0xaf, 0xc5 } },
      { 0x02eb, { 0xc3, 0xc8, 0xd4 } }, { 0x02ec, { 0x00, 0x25, 0x3e } },
      { 0x02ed, { 0x1a, 0x47, 0x5b } }, { 0x02ee, { 0x51, 0x74, 0x83 } },
      { 0x02ef, { 0x89, 0x9f, 0xa3 } }, { 0x02f0, { 0xa2, 0xb4, 0xb4 } },
      { 0x02f1, { 0xbc, 0xca, 0xc2 } }, { 0x02f2, { 0xd1, 0xdc, 0xd0 } },
      { 0x02f3, { 0x00, 0x1b, 0x31 } }, { 0x02f4, { 0x18, 0x39, 0x4c } },
      { 0x02f5, { 0x37, 0x53, 0x63 } }, { 0x02f6, { 0x77, 0x87, 0x8c } },
      { 0x02f7, { 0x94, 0xa0, 0xa0 } }, { 0x02f8, { 0xad, 0xb4, 0xb0 } },
      { 0x02f9, { 0xc8, 0xd0, 0xc7 } }, { 0x02fa, { 0x28, 0x38, 0x40 } },
      { 0x02fb, { 0x4c, 0x64, 0x5c } }, { 0x02fc, { 0x6a, 0x83, 0x77 } },
      { 0x02fd, { 0x7b, 0x8f, 0x82 } }, { 0x02fe, { 0xa1, 0xad, 0x9f } },
      { 0x02ff, { 0xaf, 0xb9, 0xa8 } }, { 0x0300, { 0xc1, 0xcc, 0xb7 } },
      { 0x0301, { 0x17, 0x27, 0x21 } }, { 0x0302, { 0x3a, 0x50, 0x4d } },
      { 0x0303, { 0x57, 0x69, 0x63 } }, { 0x0304, { 0x90, 0x9d, 0x91 } },
      { 0x0305, { 0xac, 0xb1, 0xa2 } }, { 0x0306, { 0xc0, 0xcc, 0xb5 } },
      { 0x0307, { 0xd6, 0xde, 0xc8 } }, { 0x0308, { 0x34, 0x3d, 0x29 } },
      { 0x0309, { 0x4a, 0x57, 0x35 } }, { 0x030a, { 0x5d, 0x6c, 0x3d } },
      { 0x030b, { 0x9e, 0xa1, 0x75 } }, { 0x030c, { 0xb1, 0xb0, 0x7e } },
      { 0x030d, { 0xc9, 0xcb, 0xa2 } }, { 0x030e, { 0xd8, 0xd9, 0xae } },
      { 0x030f, { 0x3f, 0x45, 0x11 } }, { 0x0310, { 0x5d, 0x66, 0x00 } },
      { 0x0311, { 0x7e, 0x87, 0x46 } }, { 0x0312, { 0xb1, 0xb2, 0x73 } },
      { 0x0313, { 0xc8, 0xcc, 0x91 } }, { 0x0314, { 0xd5, 0xd9, 0xa2 } },
      { 0x0315, { 0xdd, 0xde, 0xad } }, { 0x0316, { 0x49, 0x4a, 0x2a } },
      { 0x0317, { 0x71, 0x74, 0x3d } }, { 0x0318, { 0xa5, 0xa0, 0x69 } },
      { 0x0319, { 0xc4, 0xc0, 0x7d } }, { 0x031a, { 0xca, 0xc7, 0x85 } },
      { 0x031b, { 0xd3, 0xd0, 0x8f } }, { 0x031c, { 0xda, 0xd7, 0xa3 } },
      { 0x0000, { 0x00, 0x00, 0x00 } }
    };
    unsigned short pantoneIndex = ((unsigned short)col1 << 8) | (unsigned short)col0;
    double pantoneSaturation = (double)(((unsigned short)col3 << 8) | (unsigned short)col2) / 100.0;
    RGBColor pureColor = { 0, 0, 0 };
    if (pantoneIndex)
    {
      for (unsigned short i = 0; i < sizeof(cMap)/sizeof(cMap[0]); ++i)
      {
        if (!cMap[i].ix)
          break;
        else if (pantoneIndex < cMap[i].ix)
          break;
        else if (pantoneIndex == cMap[i].ix)
        {
          pureColor = cMap[i].color;
          break;
        }
      }
      unsigned tmpRed = cdr_round(255.0*(1-pantoneSaturation) + (double)pureColor.r*pantoneSaturation);
      unsigned tmpGreen = cdr_round(255.0*(1-pantoneSaturation) + (double)pureColor.g*pantoneSaturation);
      unsigned tmpBlue = cdr_round(255.0*(1-pantoneSaturation) + (double)pureColor.b*pantoneSaturation);
      red = (tmpRed < 255 ? (unsigned char)tmpRed : 255);
      green = (tmpGreen < 255 ? (unsigned char)tmpGreen : 255);
      blue = (tmpBlue < 255 ? (unsigned char)tmpBlue : 255);
    }
    break;
  }
  // CMYK 100
  case 0x01:
  case 0x02:
  case 0x15:
  case 0x14:
  {
    double cmyk[4] =
    {
      (double)col0,
      (double)col1,
      (double)col2,
      (double)col3
    };
    unsigned char rgb[3] = { 0, 0, 0 };
    cmsDoTransform(m_colorTransformCMYK2RGB, cmyk, rgb, 1);
    red = rgb[0];
    green = rgb[1];
    blue = rgb[2];
    break;
  }
  // CMYK 255
  case 0x03:
  case 0x11:
  {
    double cmyk[4] =
    {
      (double)col0*100.0/255.0,
      (double)col1*100.0/255.0,
      (double)col2*100.0/255.0,
      (double)col3*100.0/255.0
    };
    unsigned char rgb[3] = { 0, 0, 0 };
    cmsDoTransform(m_colorTransformCMYK2RGB, cmyk, rgb, 1);
    red = rgb[0];
    green = rgb[1];
    blue = rgb[2];
    break;
  }
  // CMY
  case 0x04:
  {
    red = 255 - col0;
    green = 255 - col1;
    blue = 255 - col2;
    break;
  }
  // RGB
  case 0x05:
  {
    unsigned char input[3] = { col2, col1, col0 };
    unsigned char output[3] = { 0, 0, 0 };
    cmsDoTransform(m_colorTransformRGB2RGB, input, output, 1);
    red = output[0];
    green = output[1];
    blue = output[2];
    break;
  }
  // HSB
  case 0x06:
  {
    unsigned short hue = (col1<<8) | col0;
    double saturation = (double)col2/255.0;
    double brightness = (double)col3/255.0;

    while (hue > 360)
      hue -= 360;

    double satRed, satGreen, satBlue;

    if (hue < 120)
    {
      satRed = (double)(120 - hue) / 60.0;
      satGreen = (double)hue / 60.0;
      satBlue = 0;
    }
    else if (hue < 240)
    {
      satRed = 0;
      satGreen = (double)(240 - hue) / 60.0;
      satBlue = (double)(hue - 120) / 60.0;
    }
    else
    {
      satRed = (double)(hue - 240) / 60.0;
      satGreen = 0.0;
      satBlue = (double)(360 - hue) / 60.0;
    }
    red = (unsigned char)cdr_round(255*(1 - saturation + saturation * (satRed > 1 ? 1 : satRed)) * brightness);
    green = (unsigned char)cdr_round(255*(1 - saturation + saturation * (satGreen > 1 ? 1 : satGreen)) * brightness);
    blue = (unsigned char)cdr_round(255*(1 - saturation + saturation * (satBlue > 1 ? 1 : satBlue)) * brightness);
    break;
  }
  // HLS
  case 0x07:
  {
    unsigned short hue = (col1<<8) | col0;
    double lightness = (double)col2/255.0;
    double saturation = (double)col3/255.0;

    while (hue > 360)
      hue -= 360;

    double satRed, satGreen, satBlue;

    if (hue < 120)
    {
      satRed =  (double)(120 - hue) / 60.0;
      satGreen = (double)hue/60.0;
      satBlue = 0.0;
    }
    else if (hue < 240)
    {
      satRed = 0;
      satGreen = (double)(240 - hue) / 60.0;
      satBlue = (double)(hue - 120) / 60.0;
    }
    else
    {
      satRed = (double)(hue - 240) / 60.0;
      satGreen = 0;
      satBlue = (double)(360 - hue) / 60.0;
    }

    double tmpRed = 2*saturation*(satRed > 1 ? 1 : satRed) + 1 - saturation;
    double tmpGreen = 2*saturation*(satGreen > 1 ? 1 : satGreen) + 1 - saturation;
    double tmpBlue = 2*saturation*(satBlue > 1 ? 1 : satBlue) + 1 - saturation;

    if (lightness < 0.5)
    {
      red = (unsigned char)cdr_round(255.0*lightness*tmpRed);
      green = (unsigned char)cdr_round(255.0*lightness*tmpGreen);
      blue = (unsigned char)cdr_round(255.0*lightness*tmpBlue);
    }
    else
    {
      red = (unsigned char)cdr_round(255*((1 - lightness) * tmpRed + 2 * lightness - 1));
      green = (unsigned char)cdr_round(255*((1 - lightness) * tmpGreen + 2 * lightness - 1));
      blue = (unsigned char)cdr_round(255*((1 - lightness) * tmpBlue + 2 * lightness - 1));
    }
    break;
  }
  // Grayscale
  case 0x09:
  {
    red = col0;
    green = col0;
    blue = col0;
    break;
  }
  // Lab
  case 0x0c:
  {
    cmsCIELab Lab;
    Lab.L = (double)col0*100.0/255.0;
    Lab.a = (double)(signed char)col1;
    Lab.b = (double)(signed char)col2;
    unsigned char rgb[3] = { 0, 0, 0 };
    cmsDoTransform(m_colorTransformLab2RGB, &Lab, rgb, 1);
    red = rgb[0];
    green = rgb[1];
    blue = rgb[2];
    break;
  }
  // Lab
  case 0x12:
  {
    cmsCIELab Lab;
    Lab.L = (double)col0*100.0/255.0;
    Lab.a = (double)((signed char)(col1 - 0x80));
    Lab.b = (double)((signed char)(col2 - 0x80));
    unsigned char rgb[3] = { 0, 0, 0 };
    cmsDoTransform(m_colorTransformLab2RGB, &Lab, rgb, 1);
    red = rgb[0];
    green = rgb[1];
    blue = rgb[2];
    break;
  }
  // HKS
  case 0x19:
  {
    unsigned char HKS_red [] =
    {
      0xff, 0xe3, 0x00, 0x00, 0xff, 0x8f, 0x00, 0x00,
      0xff, 0x9b, 0x1d, 0x00, 0xe2, 0x1f, 0x33, 0x00,
      0x78, 0x89, 0x3a, 0x00, 0xca, 0x22, 0x6f, 0x00,
      0xb2, 0x34, 0x86, 0x00, 0xb0, 0x3b, 0x8e, 0x00,
      0x54, 0x3c, 0xcb, 0x00, 0x28, 0x53, 0xd2, 0x00,
      0x55, 0x96, 0xd3, 0x00, 0x00, 0xd2, 0xa0, 0x00,
      0x00, 0x98, 0x55, 0x00, 0x00, 0x6a, 0x7d, 0x00,
      0x2a, 0x6a, 0x40, 0x00, 0x46, 0xc6, 0x0d, 0x00,
      0xea, 0xa9, 0x00, 0x00, 0x92, 0x6d, 0x2b, 0x00,
      0x7a, 0x5e, 0x1f, 0x00, 0x66, 0x22, 0x8d, 0x00,
      0xad, 0x80, 0x59, 0x00, 0x83, 0x41
    };

    unsigned char HKS_green [] =
    {
      0xff, 0xe3, 0x00, 0x00, 0xff, 0x8f, 0x00, 0x00,
      0xff, 0x9b, 0x1d, 0x00, 0xe2, 0x1f, 0x33, 0x00,
      0x78, 0x89, 0x3a, 0x00, 0xca, 0x22, 0x6f, 0x00,
      0xb2, 0x34, 0x86, 0x00, 0xb0, 0x3b, 0x8e, 0x00,
      0x54, 0x3c, 0xcb, 0x00, 0x28, 0x53, 0xd2, 0x00,
      0x55, 0x96, 0xd3, 0x00, 0x00, 0xd2, 0xa0, 0x00,
      0x00, 0x98, 0x55, 0x00, 0x00, 0x6a, 0x7d, 0x00,
      0x2a, 0x6a, 0x40, 0x00, 0x46, 0xc6, 0x0d, 0x00,
      0xea, 0xa9, 0x00, 0x00, 0x92, 0x6d, 0x2b, 0x00,
      0x7a, 0x5e, 0x1f, 0x00, 0x66, 0x22, 0x8d, 0x00,
      0xad, 0x80, 0x59, 0x00, 0x83, 0x41
    };

    unsigned char HKS_blue [] =
    {
      0xff, 0xe3, 0x00, 0x00, 0xff, 0x8f, 0x00, 0x00,
      0xff, 0x9b, 0x1d, 0x00, 0xe2, 0x1f, 0x33, 0x00,
      0x78, 0x89, 0x3a, 0x00, 0xca, 0x22, 0x6f, 0x00,
      0xb2, 0x34, 0x86, 0x00, 0xb0, 0x3b, 0x8e, 0x00,
      0x54, 0x3c, 0xcb, 0x00, 0x28, 0x53, 0xd2, 0x00,
      0x55, 0x96, 0xd3, 0x00, 0x00, 0xd2, 0xa0, 0x00,
      0x00, 0x98, 0x55, 0x00, 0x00, 0x6a, 0x7d, 0x00,
      0x2a, 0x6a, 0x40, 0x00, 0x46, 0xc6, 0x0d, 0x00,
      0xea, 0xa9, 0x00, 0x00, 0x92, 0x6d, 0x2b, 0x00,
      0x7a, 0x5e, 0x1f, 0x00, 0x66, 0x22, 0x8d, 0x00,
      0xad, 0x80, 0x59, 0x00, 0x83, 0x41
    };
    unsigned short hks = (unsigned short)(color.m_colorValue & 0xffff)+85;
    unsigned hksIndex = hks % 86;
    hks /= 86;
    unsigned blackPercent = hks/10;
    switch (blackPercent)
    {
    case 2:
      blackPercent = 10;
      break;
    case 3:
      blackPercent = 30;
      break;
    case 4:
      blackPercent = 50;
      break;
    default:
      blackPercent = 0;
      break;
    }
    unsigned colorPercent = (hks % 10) ? (hks % 10) * 10 : 100;
    // try to avoid overflow due to rounding issues, so use first wider integer types and later, fill the unsigned char properly
    unsigned tmpRed = cdr_round((double)(1.0 - (double)blackPercent/100.0)*(255.0*(1.0 - (double)colorPercent/100.0) + HKS_red[hksIndex]*(double)colorPercent/100.0));
    unsigned tmpGreen = cdr_round((double)(1.0 - (double)blackPercent/100.0)*(255.0*(1.0 - (double)colorPercent/100.0) + HKS_green[hksIndex]*(double)colorPercent/100.0));
    unsigned tmpBlue = cdr_round((double)(1.0 - (double)blackPercent/100.0)*(255.0*(1.0 - (double)colorPercent/100.0) + HKS_blue[hksIndex]*(double)colorPercent/100.0));
    red = (tmpRed < 255 ? (unsigned char)tmpRed : 255);
    green = (tmpGreen < 255 ? (unsigned char)tmpGreen : 255);
    blue = (tmpBlue < 255 ? (unsigned char)tmpBlue : 255);
    break;
  }
  default:
    break;
  }
  return (unsigned)((red << 16) | (green << 8) | blue);
}

WPXString libcdr::CDRParserState::getRGBColorString(const libcdr::CDRColor &color)
{
  WPXString tempString;
  tempString.sprintf("#%.6x", _getRGBColor(color));
  return tempString;
}

/* vim:set shiftwidth=2 softtabstop=2 expandtab: */
